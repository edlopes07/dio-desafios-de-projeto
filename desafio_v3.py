# -*- coding: utf-8 -*-
"""desafio_v3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kDpwnzRBAM9xq1YJbEDCOtYct5rQXM8j
"""

from abc import ABC, abstractclassmethod, abstractproperty
from datetime import datetime

class cliente:
  def __init__(self, endereco):
    self.endereco = endereco
    self.contas = []

  def transacao(self, conta, transacao):
    transacao.registrar(conta)

  def addconta(self, conta):
    self.contas.append(conta)

class pessoafisica(cliente):
  def __init__(self, nome, datanascimento, cpf, endereco):
    super().__init__(endereco)
    self.nome = nome
    self.datanascimento = datanascimento
    self.cpf = cpf

class conta:
  def __init__(self, numero, cliente):
    self._saldo = 0
    self._numero = numero
    self._agencia = "0001"
    self._cliente = cliente
    self._historico = historico()

  @classmethod
  def novaconta(cls, cliente, numero):
    return cls(numero, cliente)

  @property
  def saldo(self):
    return self._saldo

  @property
  def numero(self):
    return self._numero

  @property
  def agencia(self):
    return self._agencia

  @property
  def cliente(self):
    return self._cliente

  @property
  def historico(self):
    return self._historico

  def sacar(self, valor):
    saldo = self.saldo
    excedeu_saldo = valor > saldo

    if excedeu_saldo:
      print("\n Operação falhou! \n Você não possui saldo suficiente!")

    elif valor < 0:
      print("\n Operação falhou! \n O valor informado é inválido.")

    else:
      self._saldo -= valor
      print("===== Saque realizado com sucesso! =====")
      return True

    return False

  def depositar(self, valor):
    if valor < 0:
      print("Não é possível depositar esse valor, por favor selecione novamente a opção desejada.")

    else:
      self._saldo += valor
      print("===== O depósito foi bem-sucedido! =====")
      return True

    return False

class contacorrente(conta):
  def __init__(self, numero, cliente, limite=500, limite_saques=3):
    super().__init__(numero, cliente)
    self.limite = limite
    self.limite_saques = limite_saques

  def sacar(self, valor):
    numero_saques = len(
        [transacao for transacao in self.historico.transacoes if transacao["tipo"] == saque.__name__]
    )

    excedeu_limite = valor > self.limite
    excedeu_saques = numero_saques >= self.limite_saques

    if excedeu_limite:
      print("\n Operação falhou! \n Você ultrapassou o limite de R$500,00 por saque. Por favor, tente novamente.")

    elif excedeu_saques:
      print("O limite de saques diários foi atingido. Por favor, volte amanhã!")

    else:
      return super().sacar(valor)

    return False

  def __str__(self):
    return f"""\
      Agência:\t{self.agencia}
      C/C:\t\t{self.numero}
      Titular:\t{self.cliente.nome}
    """

class historico:
  def __init__(self):
    self._transacoes = []

  @property
  def transacoes(self):
    return self._transacoes

  def addtransacao(self, transacao):
    self._transacoes.append(
        {
            "tipo": transacao.__class__.__name__,
            "valor": transacao.valor,
            "data": datetime.now().strftime("&d-%m-%Y %H : %M : %s"),
        }
    )

class transacao(ABC):
  @property
  @abstractproperty
  def valor(self):
    pass

  @abstractclassmethod
  def registrar(self, conta):
    pass

class saque(transacao):
  def __init__(self, valor):
    self._valor = valor

  @property
  def valor(self):
    return self._valor

  def registrar(self, conta):
    sucesso_transacao = conta.sacar(self.valor)

    if sucesso_transacao:
      conta.historico.addtransacao(self)

class deposito(transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso_transacao = conta.depositar(self.valor)

        if sucesso_transacao:
            conta.historico.addtransacao(self)

def menu():
  menu = """\n
  ========== MENU ==========
  [1]\tDepositar
  [2]\tSacar
  [3]\tExtrato
  [4]\tNovo usuário
  [5]\tNova conta
  [6]\tListar contas
  [0]\tSair
  => """
  return input(menu)

def filtrar_cliente(cpf, clientes):
  clientes_filtrados = [cliente for cliente in clientes if cliente.cpf == cpf]
  return clientes_filtrados[0] if clientes_filtrados else None

def recuperarconta(cliente):
  if not cliente.contas:
    print("\nCliente não possui conta!")
    return

  return cliente.contas[0]

def depositar(clientes):
  cpf = input("Informe o CPF do cliente: ")
  cliente = filtrar_cliente(cpf, clientes)

  if not cliente:
    print("\n Cliente não encontrado!")
    return

  valor = float(input("Informe o valor do depósito: "))
  transacao = deposito(valor)

  conta = recuperarconta(cliente)
  if not conta:
    return

  cliente.transacao(conta, transacao)

def sacar(clientes):
  cpf = input("Informe o CPF do cliente: ")
  cliente = filtrar_cliente(cpf, clientes)

  if not cliente:
    print("\n Cliente não encontrado!")
    return

  valor = float(input("Informe o valor do saque: "))
  transacao = saque(valor)

  conta = recuperarconta(cliente)
  if not conta:
    return

  cliente.transacao(conta, transacao)

def exibir_extrato(clientes):
  cpf = input("Informe o CPF do cliente: ")
  cliente = filtrar_cliente(cpf, clientes)

  if not cliente:
    print("\n Cliente não encontrado!")
    return

  conta = recuperarconta(cliente)
  if not conta:
    return

  print("\n========== EXTRATO ==========")
  transacoes = conta.historico.transacoes

  extrato = ""
  if not transacoes:
    extrato = "Não foram realizadas movimentações."
  else:
    for transacao in transacoes:
      extrato += f"\n{transacao['tipo']}:\n\tR${transacao['valor']:.2f}"
  print(extrato)
  print(f"\nSaldo:\n\tR${conta.saldo:.2f}")
  print("=============================")

def criar_cliente(clientes):
  cpf = input("Informe o CPF do cliente: ")
  cliente = filtrar_cliente(cpf, clientes)

  if cliente:
    print("\nJá existe um usuário vinculado a este CPF!")
    return

  nome = input("Informe seu nome completo: ")
  datanascimento = input("Informe sua data de nascimento (dd-mm-aaaa): ")
  endereco = input("Informe o seu endereço (logradouro, nro - bairro - cidade/sigla estado): ")

  cliente = pessoafisica(nome=nome, datanascimento=datanascimento, cpf=cpf, endereco=endereco)

  clientes.append(cliente)

  print("===== Usuário cadastrado com sucesso! =====")

def criar_conta(numero_conta, clientes, contas):
  cpf = input("Informe o CPF do cliente: ")
  cliente = filtrar_cliente(cpf, clientes)

  if not cliente:
    print("\n Cliente não encontrado!\nFluxo de criação de conta encerrado!")
    return

  conta = contacorrente.novaconta(cliente=cliente, numero=numero_conta)
  contas.append(conta)
  cliente.contas.append(conta)

  print("\n===== Conta criada com sucesso! =====")

def listar_contas(contas):
  for conta in contas:
    print("=" * 100)
    print(str(conta))

def main():
  clientes = []
  contas = []

  while True:
    opcao = menu()

    if opcao == "1":
      depositar(clientes)

    elif opcao == "2":
      sacar(clientes)

    elif opcao == "3":
      exibir_extrato(clientes)

    elif opcao == "4":
      criar_cliente(clientes)

    elif opcao == "5":
      numero_conta = len(contas) + 1
      criar_conta(numero_conta, clientes, contas)

    elif opcao == "6":
      listar_contas(contas)

    elif opcao == "0":
      break

    else:
      print("Operação inválida, por favor selecione novamente a opção desejada.")

main()